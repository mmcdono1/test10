# Generated by Django 3.0.8 on 2020-07-04 05:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Best_hand_analysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('board_card_details', models.CharField(max_length=25, null=True)),
                ('layout_id', models.IntegerField()),
                ('correct_answer', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Card_groups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hand_group', models.CharField(max_length=4)),
                ('grouping', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Card_opening_ranks',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cards', models.CharField(max_length=3)),
                ('rank', models.IntegerField()),
                ('cumulative_percentage', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Commentary_stubs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commentary', models.CharField(max_length=500)),
                ('betting_round', models.IntegerField()),
                ('play_order', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Core_topics',
            fields=[
                ('core_topic_id', models.IntegerField(default=None, primary_key=True, serialize=False)),
                ('core_topic_name', models.CharField(max_length=100)),
                ('game_type', models.CharField(max_length=100)),
                ('stack_size_ratios', models.CharField(max_length=100)),
                ('betting_rounds', models.CharField(max_length=100)),
                ('table_sizes', models.CharField(max_length=100)),
                ('tournament_structure', models.CharField(max_length=100)),
                ('tournament_stakes', models.CharField(max_length=100)),
                ('track_ordering', models.IntegerField()),
                ('level', models.CharField(default='Basic', max_length=50)),
                ('betting_round_id', models.IntegerField()),
                ('play_order', models.IntegerField()),
                ('allowed_positions', models.CharField(max_length=20)),
                ('description', models.TextField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Criteria_badges',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('badge_description', models.CharField(max_length=30)),
                ('badge_level', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Face_up_cards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.IntegerField()),
                ('cards', models.CharField(max_length=7)),
                ('div_id', models.CharField(max_length=2)),
                ('details', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='Flop_analysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flop_card_details', models.CharField(max_length=8)),
                ('description', models.CharField(max_length=200)),
                ('type', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Hand_commentary',
            fields=[
                ('question_id', models.IntegerField(primary_key=True, serialize=False)),
                ('hand_description', models.TextField()),
                ('short_answer', models.CharField(max_length=100)),
                ('detailed_answer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Hand_criteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criteria_id', models.IntegerField()),
                ('question_id', models.IntegerField()),
                ('criteria_order', models.IntegerField()),
                ('commentary_1', models.IntegerField()),
                ('commentary_2', models.IntegerField()),
                ('value_1', models.IntegerField()),
                ('value_2', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Hand_criteria_commentary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commentary_1', models.CharField(max_length=500)),
                ('commentary_2', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Hand_eval_preflop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_type', models.CharField(max_length=30)),
                ('hero_hand', models.CharField(max_length=5)),
                ('villain_one_range', models.CharField(max_length=50)),
                ('villain_two_range', models.CharField(max_length=50, null=True)),
                ('villain_three_range', models.CharField(max_length=50, null=True)),
                ('villain_four_range', models.CharField(max_length=50, null=True)),
                ('range_one_lookup_id', models.IntegerField()),
                ('range_two_lookup_id', models.IntegerField(null=True)),
                ('range_three_lookup_id', models.IntegerField(null=True)),
                ('range_four_lookup_id', models.IntegerField(null=True)),
                ('hand_count', models.IntegerField()),
                ('flop_hand_percents', models.CharField(max_length=68)),
                ('flop_hand_ahead_percents', models.CharField(max_length=68)),
                ('turn_hand_percents', models.CharField(max_length=68)),
                ('turn_hand_ahead_percents', models.CharField(max_length=68)),
                ('river_hand_percents', models.CharField(max_length=68)),
                ('river_hand_ahead_percents', models.CharField(max_length=68)),
                ('flop_tie', models.DecimalField(decimal_places=3, max_digits=6)),
                ('turn_tie', models.DecimalField(decimal_places=3, max_digits=6)),
                ('river_tie', models.DecimalField(decimal_places=3, max_digits=6)),
                ('flop_ahead', models.DecimalField(decimal_places=3, max_digits=6)),
                ('turn_ahead', models.DecimalField(decimal_places=3, max_digits=6)),
                ('river_ahead', models.DecimalField(decimal_places=3, max_digits=6)),
                ('villain_hero_river_top_pair_plus', models.DecimalField(decimal_places=1, max_digits=4, null=True)),
                ('hero_dominate_river', models.DecimalField(decimal_places=1, max_digits=4, null=True)),
                ('hand_rank', models.IntegerField(null=True)),
                ('villain_count', models.IntegerField()),
                ('domination_percents', models.CharField(max_length=68)),
                ('nuts_percentage', models.DecimalField(decimal_places=3, max_digits=6)),
            ],
        ),
        migrations.CreateModel(
            name='Hand_eval_river',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_type', models.CharField(max_length=30)),
                ('hero_actual', models.CharField(max_length=5)),
                ('flop_cards', models.CharField(max_length=8)),
                ('turn_card', models.CharField(max_length=2)),
                ('river_card', models.CharField(max_length=2)),
                ('hand_count', models.IntegerField()),
                ('river_tie', models.DecimalField(decimal_places=1, max_digits=4)),
                ('hero_river_hand_type', models.IntegerField()),
                ('river_ahead', models.DecimalField(decimal_places=1, max_digits=4)),
                ('villain_count', models.IntegerField()),
                ('villain_river_percents', models.CharField(max_length=68)),
                ('villain_preflop_range', models.CharField(max_length=50)),
                ('villain_preflop_range_id', models.IntegerField()),
                ('villain_range_filter_lookup_id', models.IntegerField(null=True)),
                ('villain_range_filter_type', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Hand_eval_turn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_type', models.CharField(max_length=30)),
                ('hero_actual', models.CharField(max_length=5)),
                ('flop_cards', models.CharField(max_length=8)),
                ('turn_card', models.CharField(max_length=2)),
                ('villain_one_range', models.CharField(max_length=50)),
                ('villain_count', models.IntegerField()),
                ('range_one_lookup_id', models.IntegerField()),
                ('hand_count', models.IntegerField()),
                ('turn_tie', models.DecimalField(decimal_places=1, max_digits=4)),
                ('river_tie', models.DecimalField(decimal_places=1, max_digits=4)),
                ('turn_hand_percents', models.CharField(max_length=68)),
                ('turn_hand_ahead_percents', models.CharField(max_length=68)),
                ('river_hand_percents', models.CharField(max_length=68)),
                ('river_hand_ahead_percents', models.CharField(max_length=50)),
                ('turn_ahead', models.DecimalField(decimal_places=1, max_digits=4)),
                ('river_ahead', models.DecimalField(decimal_places=1, max_digits=4)),
                ('villain_turn_percents', models.CharField(max_length=68)),
                ('villain_turn_straight_draws', models.CharField(max_length=68)),
                ('villain_turn_flush_draws', models.CharField(max_length=68)),
                ('villain_turn_flush_straight_draws', models.CharField(max_length=68)),
                ('hero_ahead_flop_ahead_turn_percent', models.DecimalField(decimal_places=1, max_digits=4)),
                ('hero_ahead_flop_behind_turn_percent', models.DecimalField(decimal_places=1, max_digits=4)),
                ('hero_behind_flop_ahead_turn_percent', models.DecimalField(decimal_places=1, max_digits=4)),
                ('hero_behind_flop_behind_turn_percent', models.DecimalField(decimal_places=1, max_digits=4)),
                ('hero_ahead_flop_behind_turn_percentile', models.DecimalField(decimal_places=1, max_digits=4)),
                ('hero_behind_flop_ahead_turn_percentile', models.DecimalField(decimal_places=1, max_digits=4)),
            ],
        ),
        migrations.CreateModel(
            name='Play_modes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Player_comparision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lookup_type', models.IntegerField()),
                ('lookup_id', models.IntegerField()),
                ('entries', models.IntegerField()),
                ('score', models.IntegerField()),
                ('percentage_better_than', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Player_layout_best_hand',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layout_id', models.IntegerField()),
                ('div_id', models.CharField(max_length=3)),
                ('player_name', models.CharField(max_length=30)),
                ('player_position', models.IntegerField()),
                ('active_flag', models.BooleanField(default=True)),
                ('card_details', models.CharField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='Player_types',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Questions',
            fields=[
                ('question_id', models.IntegerField(primary_key=True, serialize=False)),
                ('difficulty', models.IntegerField()),
                ('question_rating', models.IntegerField(default=5)),
                ('hero_position', models.IntegerField()),
                ('hero_cards', models.CharField(max_length=3)),
                ('correct_answer', models.IntegerField()),
                ('hand_data', models.IntegerField()),
                ('active_flag', models.BooleanField(default=True)),
                ('layout_id', models.IntegerField()),
                ('hero_card_details', models.CharField(max_length=5)),
                ('flop_card_details', models.CharField(max_length=8, null=True)),
                ('turn_card_details', models.CharField(max_length=2, null=True)),
                ('river_card_details', models.CharField(max_length=2, null=True)),
                ('pot_size', models.IntegerField(default=0)),
                ('call_amount', models.IntegerField(default=0)),
                ('min_raise', models.IntegerField(default=0)),
                ('big_blind_amount', models.IntegerField()),
                ('button_div', models.CharField(max_length=2)),
                ('big_blind_div', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('core_topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Core_topics')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz_lists',
            fields=[
                ('track_id', models.IntegerField()),
                ('quiz_id', models.IntegerField(primary_key=True, serialize=False)),
                ('play_order', models.IntegerField()),
                ('difficulty', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Quiz_questions_lists',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.IntegerField()),
                ('quiz_id', models.IntegerField()),
                ('preload_flag', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Range_analysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('range_lookup_id', models.IntegerField()),
                ('card_grouping', models.CharField(max_length=500)),
                ('action_type', models.CharField(max_length=20)),
                ('comment', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Range_analysis_grouping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('range_lookup_id', models.IntegerField()),
                ('core_topic_id', models.IntegerField()),
                ('hero_position', models.IntegerField(blank=True)),
                ('villain_position', models.IntegerField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Range_analysis_with_suits',
            fields=[
                ('range_lookup_id', models.IntegerField(primary_key=True, serialize=False)),
                ('card_grouping', models.CharField(max_length=4000, null=True)),
                ('card_grouping_one_suit', models.CharField(max_length=4000, null=True)),
                ('one_suit_key', models.CharField(max_length=50, null=True)),
                ('card_grouping_two_suits', models.CharField(max_length=4000, null=True)),
                ('two_suits_key', models.CharField(max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Response_options_lookup',
            fields=[
                ('response_type_id', models.IntegerField(primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=50)),
                ('action_type', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Track_types',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('track_type', models.CharField(max_length=100)),
                ('background_color', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Track_headings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('track_title', models.CharField(max_length=100)),
                ('track_description', models.TextField()),
                ('track_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='track_headings', to='poker_logic.Track_types')),
            ],
        ),
        migrations.CreateModel(
            name='Track_content',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Core_topics')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Track_headings')),
            ],
        ),
        migrations.CreateModel(
            name='Response_options',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response_order', models.IntegerField()),
                ('response_amount', models.IntegerField()),
                ('points', models.IntegerField()),
                ('expected_value', models.IntegerField()),
                ('twenty_percent_drawdown', models.DecimalField(decimal_places=1, max_digits=3)),
                ('comment', models.CharField(blank=True, max_length=50, null=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Questions')),
                ('response_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Response_options_lookup')),
            ],
        ),
        migrations.CreateModel(
            name='Question_responses',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_id', models.IntegerField()),
                ('answer_given', models.IntegerField()),
                ('session_id', models.IntegerField(blank=True)),
                ('answer_status', models.IntegerField(blank=True)),
                ('aggression_factor', models.IntegerField(blank=True)),
                ('frequency_factor', models.IntegerField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('player_score', models.FloatField(default=1.5)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question', to='poker_logic.Questions')),
            ],
        ),
        migrations.CreateModel(
            name='Question_follow_up',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prior_question_id', models.IntegerField()),
                ('next_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Questions')),
            ],
        ),
        migrations.CreateModel(
            name='Player_scorecard_by_quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_id', models.IntegerField()),
                ('score', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('quiz_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Quiz_lists')),
            ],
        ),
        migrations.CreateModel(
            name='Player_scorecard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_id', models.IntegerField()),
                ('entries', models.IntegerField(default=0)),
                ('score', models.FloatField(default=1.5)),
                ('mode', models.IntegerField(default=1)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('core_topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Core_topics')),
            ],
        ),
        migrations.CreateModel(
            name='Player_layout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('layout_id', models.IntegerField()),
                ('div_id', models.CharField(max_length=30)),
                ('stack_size', models.IntegerField()),
                ('player_name', models.CharField(max_length=30)),
                ('active_flag', models.BooleanField(default=True)),
                ('bet_amount', models.IntegerField(default=0)),
                ('card_details', models.CharField(max_length=5, null=True)),
                ('player_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Player_types')),
            ],
        ),
        migrations.CreateModel(
            name='Hand_eval_flop',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_type', models.CharField(max_length=30)),
                ('hero_actual', models.CharField(max_length=5)),
                ('flop_cards', models.CharField(max_length=8)),
                ('villain_one_range', models.CharField(max_length=50)),
                ('range_one_lookup_id', models.IntegerField()),
                ('hand_count', models.IntegerField()),
                ('flop_tie', models.DecimalField(decimal_places=1, max_digits=4)),
                ('turn_tie', models.DecimalField(decimal_places=1, max_digits=4)),
                ('river_tie', models.DecimalField(decimal_places=1, max_digits=4)),
                ('hero_tie_river_when_villain_hits_flop', models.DecimalField(decimal_places=1, max_digits=4)),
                ('hero_best_river_when_villain_hits_flop', models.DecimalField(decimal_places=1, max_digits=4)),
                ('hero_tie_river_when_villain_misses_flop', models.DecimalField(decimal_places=1, max_digits=4)),
                ('hero_best_river_when_villain_misses_flop', models.DecimalField(decimal_places=1, max_digits=4)),
                ('flop_hit_filter_min', models.CharField(max_length=60)),
                ('turn_hand_percents', models.CharField(max_length=68)),
                ('turn_hand_ahead_percents', models.CharField(max_length=68)),
                ('river_hand_percents', models.CharField(max_length=68)),
                ('river_hand_ahead_percents', models.CharField(max_length=50)),
                ('flop_ahead', models.DecimalField(decimal_places=1, max_digits=4)),
                ('turn_ahead', models.DecimalField(decimal_places=1, max_digits=4)),
                ('river_ahead', models.DecimalField(decimal_places=1, max_digits=4)),
                ('villain_flop_percents', models.CharField(max_length=68)),
                ('villain_flop_straight_draws', models.CharField(max_length=68)),
                ('villain_flop_flush_draws', models.CharField(max_length=68)),
                ('villain_flop_flush_straight_draws', models.CharField(max_length=68)),
                ('villain_range_hit_flop_percentile', models.DecimalField(decimal_places=1, max_digits=4)),
                ('villain_count', models.IntegerField()),
                ('villain_hit_spread', models.CharField(max_length=25)),
                ('river_equity_against_villains_that_continue', models.DecimalField(decimal_places=1, max_digits=4)),
                ('flop_analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Flop_analysis')),
            ],
        ),
        migrations.CreateModel(
            name='Hand_criteria_titles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criteria_title', models.CharField(max_length=150)),
                ('betting_rounds', models.CharField(max_length=100)),
                ('criteria', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Hand_criteria')),
            ],
        ),
        migrations.CreateModel(
            name='Hand_criteria_new',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criteria_id', models.IntegerField()),
                ('question_id', models.IntegerField()),
                ('criteria_order', models.IntegerField()),
                ('commentary', models.CharField(max_length=200)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Criteria_badges')),
            ],
        ),
        migrations.CreateModel(
            name='Event_sequence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_order', models.IntegerField()),
                ('action_type', models.CharField(max_length=30)),
                ('div_id', models.CharField(max_length=30)),
                ('net_amount', models.IntegerField()),
                ('gross_amount', models.IntegerField()),
                ('action_description', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('range_lookup_id', models.IntegerField()),
                ('villain_position', models.IntegerField()),
                ('active_flag', models.BooleanField(default=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Questions')),
            ],
        ),
        migrations.CreateModel(
            name='Commentary_history_lookup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.IntegerField()),
                ('feeder_stubs', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poker_logic.Commentary_stubs')),
            ],
        ),
    ]
